swagger: "2.0"
info:
  title: proto/user/user.proto
  version: version not set
tags:
  - name: UserService
  - name: HelloService
consumes:
  - application/json
produces:
  - application/json
paths:
  /hello.HelloService/SayHello:
    post:
      operationId: HelloService_SayHello
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/helloHelloResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/helloHelloRequest'
      tags:
        - HelloService
  /hello.HelloService/SayHelloContinuous:
    post:
      operationId: HelloService_SayHelloContinuous
      responses:
        "200":
          description: A successful response.(streaming responses)
          schema:
            type: object
            properties:
              result:
                $ref: '#/definitions/helloHelloResponse'
              error:
                $ref: '#/definitions/rpcStatus'
            title: Stream result of helloHelloResponse
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          description: ' (streaming inputs)'
          in: body
          required: true
          schema:
            $ref: '#/definitions/helloHelloRequest'
      tags:
        - HelloService
  /hello.HelloService/SayHelloToEveryone:
    post:
      operationId: HelloService_SayHelloToEveryone
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/helloHelloResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          description: ' (streaming inputs)'
          in: body
          required: true
          schema:
            $ref: '#/definitions/helloHelloRequest'
      tags:
        - HelloService
  /hello.HelloService/SayManyHellos:
    post:
      operationId: HelloService_SayManyHellos
      responses:
        "200":
          description: A successful response.(streaming responses)
          schema:
            type: object
            properties:
              result:
                $ref: '#/definitions/helloHelloResponse'
              error:
                $ref: '#/definitions/rpcStatus'
            title: Stream result of helloHelloResponse
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/helloHelloRequest'
      tags:
        - HelloService
  /user.UserService/DeleteUser:
    post:
      operationId: UserService_DeleteUser
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/userUserResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/userDeleteUserRequest'
      tags:
        - UserService
  /user.UserService/FindAllUser:
    post:
      operationId: UserService_FindAllUser
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/userFindAllResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/userPageUserRequest'
      tags:
        - UserService
  /user.UserService/GetUser:
    post:
      operationId: UserService_GetUser
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/userUserResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/userGetUserRequest'
      tags:
        - UserService
  /user.UserService/Login:
    post:
      operationId: UserService_Login
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/userUserResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/userLoginRequest'
      tags:
        - UserService
  /user.UserService/Register:
    post:
      operationId: UserService_Register
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/userUserResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/userRegisterRequest'
      tags:
        - UserService
  /user.UserService/UpdateUser:
    post:
      operationId: UserService_UpdateUser
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/userUserResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/userUpdateUserRequest'
      tags:
        - UserService
definitions:
  helloHelloRequest:
    type: object
    properties:
      name:
        type: string
      age:
        type: integer
        format: int64
  helloHelloResponse:
    type: object
    properties:
      greet:
        type: string
  protobufAny:
    type: object
    properties:
      '@type':
        type: string
    additionalProperties: {}
  rpcStatus:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      details:
        type: array
        items:
          type: object
          $ref: '#/definitions/protobufAny'
  typeDateTime:
    type: object
    properties:
      year:
        type: integer
        format: int32
        description: "Optional. Year of date. Must be from 1 to 9999, or 0 if specifying a\r\ndatetime without a year."
      month:
        type: integer
        format: int32
        description: Required. Month of year. Must be from 1 to 12.
      day:
        type: integer
        format: int32
        description: "Required. Day of month. Must be from 1 to 31 and valid for the year and\r\nmonth."
      hours:
        type: integer
        format: int32
        description: "Required. Hours of day in 24 hour format. Should be from 0 to 23. An API\r\nmay choose to allow the value \"24:00:00\" for scenarios like business\r\nclosing time."
      minutes:
        type: integer
        format: int32
        description: Required. Minutes of hour of day. Must be from 0 to 59.
      seconds:
        type: integer
        format: int32
        description: "Required. Seconds of minutes of the time. Must normally be from 0 to 59. An\r\nAPI may allow the value 60 if it allows leap-seconds."
      nanos:
        type: integer
        format: int32
        description: "Required. Fractions of seconds in nanoseconds. Must be from 0 to\r\n999,999,999."
      utcOffset:
        type: string
        description: "UTC offset. Must be whole seconds, between -18 hours and +18 hours.\r\nFor example, a UTC offset of -4:00 would be represented as\r\n{ seconds: -14400 }."
      timeZone:
        $ref: '#/definitions/typeTimeZone'
        description: Time zone.
    description: "Represents civil time (or occasionally physical time).\r\n\r\nThis type can represent a civil time in one of a few possible ways:\r\n\r\n * When utc_offset is set and time_zone is unset: a civil time on a calendar\r\n   day with a particular offset from UTC.\r\n * When time_zone is set and utc_offset is unset: a civil time on a calendar\r\n   day in a particular time zone.\r\n * When neither time_zone nor utc_offset is set: a civil time on a calendar\r\n   day in local time.\r\n\r\nThe date is relative to the Proleptic Gregorian Calendar.\r\n\r\nIf year is 0, the DateTime is considered not to have a specific year. month\r\nand day must have valid, non-zero values.\r\n\r\nThis type may also be used to represent a physical time if all the date and\r\ntime fields are set and either case of the `time_offset` oneof is set.\r\nConsider using `Timestamp` message for physical time instead. If your use\r\ncase also would like to store the user's timezone, that can be done in\r\nanother field.\r\n\r\nThis type is more flexible than some applications may want. Make sure to\r\ndocument and validate your application's limitations."
  typeTimeZone:
    type: object
    properties:
      id:
        type: string
        description: IANA Time Zone Database time zone, e.g. "America/New_York".
      version:
        type: string
        description: Optional. IANA Time Zone Database version number, e.g. "2019a".
    description: "Represents a time zone from the\r\n[IANA Time Zone Database](https://www.iana.org/time-zones)."
  userDeleteUserRequest:
    type: object
    properties:
      id:
        type: string
  userFindAllResponse:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      data:
        $ref: '#/definitions/userUsers'
  userGetUserRequest:
    type: object
    properties:
      id:
        type: string
  userLoginRequest:
    type: object
    properties:
      email:
        type: string
      password:
        type: string
  userPageUserRequest:
    type: object
    properties:
      id:
        type: string
  userRegisterRequest:
    type: object
    properties:
      username:
        type: string
      email:
        type: string
      password:
        type: string
      confirmPassword:
        type: string
  userUpdateUserRequest:
    type: object
    properties:
      id:
        type: string
      username:
        type: string
      email:
        type: string
      password:
        type: string
  userUser:
    type: object
    properties:
      id:
        type: string
      username:
        type: string
      email:
        type: string
      password:
        type: string
      token:
        type: string
      age:
        type: integer
        format: int64
      created_at:
        $ref: '#/definitions/typeDateTime'
      updated_at:
        $ref: '#/definitions/typeDateTime'
  userUserResponse:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      data:
        $ref: '#/definitions/userUser'
  userUsers:
    type: object
    properties:
      data:
        type: array
        items:
          type: object
          $ref: '#/definitions/userUser'
